
// Code generated by stanc v2.26.0
#include <stan/model/model_header.hpp>
namespace transient_mixture_explicit_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 32, column 2 to column 16)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 33, column 2 to column 22)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 39, column 2 to column 22)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 40, column 2 to column 20)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 41, column 2 to column 34)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 46, column 4 to column 21)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 48, column 6 to column 51)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 47, column 19 to line 49, column 5)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 47, column 4 to line 49, column 5)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 45, column 21 to line 50, column 3)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 45, column 2 to line 50, column 3)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 68, column 2 to column 38)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 69, column 2 to column 23)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 73, column 4 to column 45)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 71, column 21 to line 74, column 3)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 71, column 2 to line 74, column 3)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 57, column 2 to column 26)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 58, column 2 to column 22)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 61, column 4 to column 33)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 60, column 21 to line 62, column 3)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 60, column 2 to line 62, column 3)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 11, column 2 to column 21)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 12, column 9 to column 14)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 12, column 2 to column 16)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 13, column 9 to column 14)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 13, column 2 to column 16)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 18, column 15 to column 20)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 18, column 2 to column 22)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 22, column 4 to column 19)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 24, column 4 to column 26)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 20, column 21 to line 26, column 3)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 20, column 2 to line 26, column 3)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 39, column 15 to column 20)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 40, column 9 to column 14)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 41, column 18 to column 23)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 68, column 31 to column 36)",
                                                      " (in '/Users/fran/projects/association/stan/transient_mixture_explicit.stan', line 69, column 16 to column 21)"};



class transient_mixture_explicit_model final : public model_base_crtp<transient_mixture_explicit_model> {

 private:
  int N_obs;
  std::vector<double> y;
  std::vector<double> t;
  std::vector<Eigen::Matrix<double, -1, 1>> w;
 
 public:
  ~transient_mixture_explicit_model() { }
  
  inline std::string model_name() const final { return "transient_mixture_explicit_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.0", "stancflags = "};
  }
  
  
  transient_mixture_explicit_model(stan::io::var_context& context__,
                                   unsigned int random_seed__ = 0,
                                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "transient_mixture_explicit_model_namespace::transient_mixture_explicit_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 22;
      context__.validate_dims("data initialization","N_obs","int",
          context__.to_vec());
      N_obs = std::numeric_limits<int>::min();
      
      current_statement__ = 22;
      N_obs = context__.vals_i("N_obs")[(1 - 1)];
      current_statement__ = 22;
      current_statement__ = 22;
      check_greater_or_equal(function__, "N_obs", N_obs, 1);
      current_statement__ = 23;
      validate_non_negative_index("y", "N_obs", N_obs);
      current_statement__ = 24;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N_obs));
      y = std::vector<double>(N_obs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 24;
      assign(y, nil_index_list(), context__.vals_r("y"),
        "assigning variable y");
      current_statement__ = 25;
      validate_non_negative_index("t", "N_obs", N_obs);
      current_statement__ = 26;
      context__.validate_dims("data initialization","t","double",
          context__.to_vec(N_obs));
      t = std::vector<double>(N_obs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 26;
      assign(t, nil_index_list(), context__.vals_r("t"),
        "assigning variable t");
      current_statement__ = 27;
      validate_non_negative_index("w", "N_obs", N_obs);
      current_statement__ = 28;
      w = std::vector<Eigen::Matrix<double, -1, 1>>(N_obs, Eigen::Matrix<double, -1, 1>(2));
      stan::math::fill(w, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 32;
      for (int i = 1; i <= N_obs; ++i) {
        current_statement__ = 29;
        assign(w,
          cons_list(index_uni(i), cons_list(index_uni(1), nil_index_list())),
          t[(i - 1)], "assigning variable w");
        current_statement__ = 30;
        assign(w,
          cons_list(index_uni(i), cons_list(index_uni(2), nil_index_list())),
          (1 - w[(i - 1)][(1 - 1)]), "assigning variable w");}
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        current_statement__ = 28;
        current_statement__ = 28;
        check_simplex(function__, "w[sym1__]", w[(sym1__ - 1)]);}
      current_statement__ = 33;
      validate_non_negative_index("lp", "N_obs", N_obs);
      current_statement__ = 34;
      validate_non_negative_index("lpp", "N_obs", N_obs);
      current_statement__ = 35;
      validate_non_negative_index("log_w", "N_obs", N_obs);
      current_statement__ = 36;
      validate_non_negative_index("lambda", "N_obs", N_obs);
      current_statement__ = 37;
      validate_non_negative_index("log_prob", "N_obs", N_obs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 2;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "transient_mixture_explicit_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(mu, DUMMY_VAR__);
      
      current_statement__ = 1;
      mu = in__.vector(2);
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        assign(mu, nil_index_list(), stan::math::ordered_constrain(mu, lp__),
          "assigning variable mu");
      } else {
        current_statement__ = 1;
        assign(mu, nil_index_list(), stan::math::ordered_constrain(mu),
          "assigning variable mu");
      }
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 2;
      sigma = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        sigma = stan::math::lb_constrain(sigma, 0, lp__);
      } else {
        current_statement__ = 2;
        sigma = stan::math::lb_constrain(sigma, 0);
      }
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> lp;
      lp = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_obs, Eigen::Matrix<local_scalar_t__, -1, 1>(2));
      stan::math::fill(lp, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> lpp;
      lpp = Eigen::Matrix<local_scalar_t__, -1, 1>(N_obs);
      stan::math::fill(lpp, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> log_w;
      log_w = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_obs, Eigen::Matrix<local_scalar_t__, -1, 1>(2));
      stan::math::fill(log_w, DUMMY_VAR__);
      
      current_statement__ = 5;
      assign(log_w, nil_index_list(), stan::math::log(w),
        "assigning variable log_w");
      current_statement__ = 11;
      for (int i = 1; i <= N_obs; ++i) {
        current_statement__ = 6;
        assign(lp, cons_list(index_uni(i), nil_index_list()), log_w[(i - 1)],
          "assigning variable lp");
        current_statement__ = 9;
        for (int k = 1; k <= 2; ++k) {
          current_statement__ = 7;
          assign(lp,
            cons_list(index_uni(i),
              cons_list(index_uni(k), nil_index_list())),
            (lp[(i - 1)][(k - 1)] +
              normal_lpdf<false>(y[(i - 1)], mu[(k - 1)], sigma)),
            "assigning variable lp");}}
      {
        current_statement__ = 17;
        lp_accum__.add(lognormal_lpdf<propto__>(sigma, 4, 5));
        current_statement__ = 18;
        lp_accum__.add(normal_lpdf<propto__>(mu, 20, 10));
        current_statement__ = 21;
        for (int i = 1; i <= N_obs; ++i) {
          current_statement__ = 19;
          lp_accum__.add(log_sum_exp(lp[(i - 1)]));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "transient_mixture_explicit_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      mu = in__.vector(2);
      current_statement__ = 1;
      assign(mu, nil_index_list(), stan::math::ordered_constrain(mu),
        "assigning variable mu");
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma = in__.scalar();
      current_statement__ = 2;
      sigma = stan::math::lb_constrain(sigma, 0);
      std::vector<Eigen::Matrix<double, -1, 1>> lp;
      lp = std::vector<Eigen::Matrix<double, -1, 1>>(N_obs, Eigen::Matrix<double, -1, 1>(2));
      stan::math::fill(lp, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> lpp;
      lpp = Eigen::Matrix<double, -1, 1>(N_obs);
      stan::math::fill(lpp, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> log_w;
      log_w = std::vector<Eigen::Matrix<double, -1, 1>>(N_obs, Eigen::Matrix<double, -1, 1>(2));
      stan::math::fill(log_w, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(mu[(sym1__ - 1)]);}
      vars__.emplace_back(sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 5;
      assign(log_w, nil_index_list(), stan::math::log(w),
        "assigning variable log_w");
      current_statement__ = 11;
      for (int i = 1; i <= N_obs; ++i) {
        current_statement__ = 6;
        assign(lp, cons_list(index_uni(i), nil_index_list()), log_w[(i - 1)],
          "assigning variable lp");
        current_statement__ = 9;
        for (int k = 1; k <= 2; ++k) {
          current_statement__ = 7;
          assign(lp,
            cons_list(index_uni(i),
              cons_list(index_uni(k), nil_index_list())),
            (lp[(i - 1)][(k - 1)] +
              normal_lpdf<false>(y[(i - 1)], mu[(k - 1)], sigma)),
            "assigning variable lp");}}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_obs; ++sym2__) {
            vars__.emplace_back(lp[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
          vars__.emplace_back(lpp[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_obs; ++sym2__) {
            vars__.emplace_back(log_w[(sym2__ - 1)][(sym1__ - 1)]);}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<int> lambda;
      lambda = std::vector<int>(N_obs, std::numeric_limits<int>::min());
      
      std::vector<double> log_prob;
      log_prob = std::vector<double>(N_obs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 16;
      for (int i = 1; i <= N_obs; ++i) {
        current_statement__ = 14;
        assign(lambda, cons_list(index_uni(i), nil_index_list()),
          categorical_logit_rng(lp[(i - 1)], base_rng__),
          "assigning variable lambda");}
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        current_statement__ = 12;
        current_statement__ = 12;
        check_greater_or_equal(function__, "lambda[sym1__]",
                               lambda[(sym1__ - 1)], 1);}
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        current_statement__ = 12;
        current_statement__ = 12;
        check_less_or_equal(function__, "lambda[sym1__]",
                            lambda[(sym1__ - 1)], 2);}
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        vars__.emplace_back(lambda[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        vars__.emplace_back(log_prob[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu_flat__;
        current_statement__ = 1;
        assign(mu_flat__, nil_index_list(), context__.vals_r("mu"),
          "assigning variable mu_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 1;
          assign(mu, cons_list(index_uni(sym1__), nil_index_list()),
            mu_flat__[(pos__ - 1)], "assigning variable mu");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> mu_free__;
      mu_free__ = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(mu_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(mu_free__, nil_index_list(), stan::math::ordered_free(mu),
        "assigning variable mu_free__");
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(mu_free__[(sym1__ - 1)]);}
      vars__.emplace_back(sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("mu");
    names__.emplace_back("sigma");
    names__.emplace_back("lp");
    names__.emplace_back("lpp");
    names__.emplace_back("log_w");
    names__.emplace_back("lambda");
    names__.emplace_back("log_prob");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_obs),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_obs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_obs),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_obs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_obs)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_obs; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "lp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lpp" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_obs; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_w" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_prob" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_obs; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "lp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lpp" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_obs; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_w" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_prob" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lp\",\"type\":{\"name\":\"array\",\"length\":" << N_obs << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}},\"block\":\"transformed_parameters\"},{\"name\":\"lpp\",\"type\":{\"name\":\"vector\",\"length\":" << N_obs << "},\"block\":\"transformed_parameters\"},{\"name\":\"log_w\",\"type\":{\"name\":\"array\",\"length\":" << N_obs << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" << N_obs << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_prob\",\"type\":{\"name\":\"array\",\"length\":" << N_obs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lp\",\"type\":{\"name\":\"array\",\"length\":" << N_obs << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}},\"block\":\"transformed_parameters\"},{\"name\":\"lpp\",\"type\":{\"name\":\"vector\",\"length\":" << N_obs << "},\"block\":\"transformed_parameters\"},{\"name\":\"log_w\",\"type\":{\"name\":\"array\",\"length\":" << N_obs << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" << N_obs << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_prob\",\"type\":{\"name\":\"array\",\"length\":" << N_obs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}

using stan_model = transient_mixture_explicit_model_namespace::transient_mixture_explicit_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return transient_mixture_explicit_model_namespace::profiles__;
}

#endif


